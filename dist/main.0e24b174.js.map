{"version":3,"sources":["models/Movie.ts","models/Service.ts","models/Search.ts","ts/main.ts"],"names":[],"mappings":"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","file":"main.0e24b174.js","sourceRoot":"..","sourcesContent":["export class Movie {\n    id: string; \n    title: string;\n    releaseYear: number; \n    poster: string; \n}; ","//syftet är att hämta data från vårt OMDB API \n// http://www.omdbapi.com/?apikey=65873bd2 + paramterar \n//http://www.omdbapi.com/?apikey=65873bd2&s=\"Harry+Potter\"  \n//Våra tjänster skall bara ha en sak att göra. \n//Vår main skall agera som klister genom att använda tjänsten,\n// och sedan skapa det som behövs för att applikationen skall bli användbar. \n\n\nimport { Movie } from \"./Movie\"; \nimport { IService } from \"./IService\";\n\nexport class Service implements IService {\n\n    //här inne utvecklar vi funktionen och det som ska hända\n    async getData(): Promise<Movie[]> {\n        console.log(\"hej jag hämtar data!\"); \n\n        //vår fetch sparas i en variabel\n        let moviefetch = await fetch(\"http://www.omdbapi.com/?apikey=65873bd2&s=Harry+Potter\"); \n        //vi sparar det hämtade resultatet i datatypen any i en variabel moviedata\n        let moviedata: any = await moviefetch.json(); \n\n        //vi använder map-loopen för vår dataarray,\n        let movies: Movie[] = moviedata.Search.map( (m: any)=> {\n\n            //för varje objekt m, skapa ett nytt objekt enligt movie-klassen: \n            let newMovie: Movie = new Movie(); \n            newMovie.id = m.imdbID; \n            newMovie.title = m.Title;\n            newMovie.releaseYear = m.Year; \n            newMovie.poster = m.Poster;  \n\n            //vi skickar tillbaka objektet i slutet av loopen\n            return newMovie; \n        }); \n\n        //vi skickar tillbaka hela movies-objektet \n        return movies; \n    }\n}","//vi testar att göra en modul för vår sökfunktion här \n\n//syftet är att hämta data från vårt OMDB API \n// http://www.omdbapi.com/?apikey=65873bd2 + paramterar \n//http://www.omdbapi.com/?apikey=65873bd2&s=\"Harry+Potter\"  \n//Våra tjänster skall bara ha en sak att göra. \n//Vår main skall agera som klister genom att använda tjänsten,\n// och sedan skapa det som behövs för att applikationen skall bli användbar. \n\n\nimport { Movie } from \"./Movie\"; \nimport { IService } from \"./IService\";\n\nexport class Search implements IService {\n\n    //byt namn på den här funktionen?? eller hur ska man tänka här om vi vill göra en sökning? \n    //här inne utvecklar vi funktionen och det som ska hända\n    async getData(): Promise<Movie[]> {\n        \n        //hämta input-värde \n        //lägg till i sökvariabel \n        let searchValue: string = (<HTMLInputElement>document.getElementById(\"user-search\")).value;\n\n        //vår fetch sparas i en variabel\n        let moviefetch = await fetch(\"http://www.omdbapi.com/?apikey=65873bd2&s=\" + searchValue); \n        //vi sparar det hämtade resultatet i datatypen any i en variabel moviedata\n        let moviedata: any = await moviefetch.json(); \n\n        //vi använder map-loopen för vår dataarray,\n        let movies: Movie[] = moviedata.Search.map( (m: any)=> {\n\n            //för varje objekt m, skapa ett nytt objekt enligt movie-klassen: \n            let newMovie: Movie = new Movie(); \n            newMovie.id = m.imdbID; \n            newMovie.title = m.Title;\n            newMovie.releaseYear = m.Year; \n            newMovie.poster = m.Poster;  \n\n            //vi skickar tillbaka objektet i slutet av loopen\n            return newMovie; \n        }); \n\n        //vi skickar tillbaka hela movies-objektet \n        (<HTMLInputElement>document.getElementById(\"user-search\")).value = \"\";\n        return movies; \n    }\n}","import {Movie} from \"../models/Movie\";\nimport {IService} from \"../models/IService\";\nimport {Service} from \"../models/Service\";\nimport {Search} from \"../models/Search\";\n// import {MockService} from \"../models/MockService\"; \n\n\n//för att köra igång applikationen \nwindow.onload = function() {\n\n    //vi skapar upp en instans av Service, servide är det som implementerar interafcet \n    //instansen blir av typen IDataService \n    let service: IService = new Service(); \n    let main: Main = new Main(); \n    //här kör vi funktionen i main-klassen!\n    main.start(service); \n\n\n    //lyssna efter sökning, om sökning görs: \n    document.getElementById(\"searchButton\").addEventListener(\"click\", ()=> {\n\n        console.log(\" you are searching...\")\n        let service: IService = new Search(); \n        let searchFor: Search = new SearchC(); \n        searchFor.search(service); \n\n    })\n\n}\n\n\n//vi definierar klassen main\n//här inne kör vi funktionen getData(), som hämtar data från APIt. Här behöver vi plocka upp datan! \nclass Main {\n\n    async start(service: IService) {\n        console.log(\"Starting operation\"); \n\n        // let movieList: Movie[] = await service.getData(); \n        // console.log(movieList); \n\n        // //för varje objekt i listan vill vi skapa upp en ny div \n        // movieList.forEach(mObject => {\n\n        //     let container = document.getElementById(\"movie-container\");\n        //     let newText = document.createElement(\"div\");\n        //     newText.setAttribute(\"class\", \"movielist\"); \n        //     container.appendChild(newText);\n         \n        //     let movietitle = document.createElement(\"h2\"); \n        //     movietitle.innerHTML = mObject.title; \n        //     newText.appendChild(movietitle); \n\n\n        //     let movieYear = document.createElement(\"p\"); \n        //     movieYear.innerHTML = \"It was released: \" + mObject.releaseYear; \n        //     newText.appendChild(movieYear); \n\n        //     let poster = document.createElement(\"img\"); \n        //     poster.src = mObject.poster; \n        //     newText.appendChild(poster); \n         \n        // });\n\n    }\n\n}\n\nclass SearchC {\n\n    //sökfunktionen? \n    async search(service: IService) {\n\n        let movieList: Movie[] = await service.getData(); \n        console.log(movieList); \n        //hit funkar det! \n        //problemet nu är att den inte vet vad den ska göra när den returnerar 0 \n        //för varje objekt i listan vill vi ersätta de gamla divvarna!\n        movieList.forEach(mObject => {\n\n            let container = document.getElementById(\"movie-container\");\n            let newText = document.createElement(\"div\");\n            newText.setAttribute(\"class\", \"movielist\"); \n            container.appendChild(newText);\n         \n            let movietitle = document.createElement(\"h2\"); \n            movietitle.innerHTML = mObject.title; \n            newText.appendChild(movietitle); \n\n\n            let movieYear = document.createElement(\"p\"); \n            movieYear.innerHTML = \"It was released: \" + mObject.releaseYear; \n            newText.appendChild(movieYear); \n\n            let poster = document.createElement(\"img\"); \n            poster.src = mObject.poster; \n            newText.appendChild(poster); \n\n        });\n\n    }\n\n}\n\n"]}