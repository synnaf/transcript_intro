{"version":3,"sources":["models/Movie.ts","models/Service.ts","ts/main.ts"],"names":[],"mappings":"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","file":"main.0e24b174.js","sourceRoot":"..","sourcesContent":["export class Movie {\n    id: String; \n    title: String;\n    releaseYear: Number; \n    poster: String; \n}; ","//syftet är att hämta data från vårt OMDB API \n// http://www.omdbapi.com/?apikey=65873bd2 + paramterar \n//http://www.omdbapi.com/?apikey=65873bd2&s=\"Harry+Potter\"  \n//Våra tjänster skall bara ha en sak att göra. \n//Vår main skall agera som klister genom att använda tjänsten,\n// och sedan skapa det som behövs för att applikationen skall bli användbar. \n\n\nimport { Movie } from \"./Movie\"; \nimport { IService } from \"./IService\";\n\nexport class Service implements IService {\n\n    //här inne utvecklar vi funktionen och det som ska hända\n    async getData(): Promise<Movie[]> {\n        console.log(\"hej jag hämtar data!\"); \n\n        //vår fetch sparas i en variabel\n        let moviefetch = await fetch(\"http://www.omdbapi.com/?apikey=65873bd2&s=Harry+Potter\"); \n        //vi sparar det hämtade resultatet i datatypen any i en variabel moviedata\n        let moviedata: any = await moviefetch.json(); \n\n        //vi använder map-loopen för vår dataarray,\n        let movies: Movie[] = moviedata.Search.map( (m: any)=> {\n\n            //för varje objekt m, skapa ett nytt objekt enligt movie-klassen: \n            let newMovie: Movie = new Movie(); \n            newMovie.id = m.imdbID; \n            newMovie.title = m.Title;\n            newMovie.releaseYear = m.Year; \n            newMovie.poster = m.Poster;  \n\n            //vi skickar tillbaka objektet i slutet av loopen\n            return newMovie; \n        }); \n\n        //vi skickar tillbaka hela movies-objektet \n        return movies; \n    }\n}","import {Movie} from \"../models/Movie\";\nimport {IService} from \"../models/IService\";\nimport {Service} from \"../models/Service\";\n// import {MockService} from \"../models/MockService\"; \n\n\n//för att köra igång applikationen \nwindow.onload = function() {\n\n    //vi skapar upp en instans av Service, servide är det som implementerar interafcet \n    //instansen blir av typen IDataService \n    let service: IService = new Service(); \n    let main: Main = new Main(); \n    //här kör vi funktionen i main-klassen!\n    main.start(service); \n   \n}\n\n//vi definierar klassen main\n//här inne kör vi funktionen getData(), som hämtar data från APIt. Här behöver vi plocka upp datan! \nclass Main {\n\n    async start(service: IService) {\n        console.log(\"Starting operation\"); \n\n        let movieList: Movie[] = await service.getData(); \n        console.log(movieList); \n\n        //för varje objekt i listan vill vi skapa upp en ny div \n        movieList.forEach(mObject => {\n\n            let container = document.getElementById(\"movie-container\");\n            let newText = document.createElement(\"div\");\n            newText.setAttribute(\"class\", \"movielist\"); \n            container.appendChild(newText);\n         \n            let movietitle = document.createElement(\"h2\"); \n            movietitle.innerHTML = mObject.title; \n            newText.appendChild(movietitle); \n\n\n            let movieYear = document.createElement(\"p\"); \n            movieYear.innerHTML = \"It was released: \" + mObject.releaseYear; \n            newText.appendChild(movieYear); \n\n            let poster = document.createElement(\"img\"); \n            poster.src = mObject.poster; \n            newText.appendChild(poster); \n\n         \n        });\n\n    }\n\n}\n"]}